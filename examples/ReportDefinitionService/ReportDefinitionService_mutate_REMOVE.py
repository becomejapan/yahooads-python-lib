# Copyright 2017 Become Corp. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Example code for
Service : ReportDefinitionService
Operation: mutate (REMOVE)
API Reference: https://github.com/yahoojp-marketing/sponsored-search-api-documents/blob/6.5/docs/en/api_reference/services/ReportDefinitionService.md

Generated by 'api_reference_example_generator.py' using code template 'sample_template.py.template'
"""

import logging
import json

from yahooads import promotionalads

logging.basicConfig(level=logging.INFO)
# logging.getLogger('suds.client').setLevel(logging.DEBUG)
# logging.getLogger('suds.transport').setLevel(logging.DEBUG)


SERVICE = 'ReportDefinitionService'
OPERATION = 'mutate (REMOVE)'
OPERAND = {
  "operator": "REMOVE", 
  "accountId": "SAMPLE-ACCOUNT-ID", 
  "operand": {
    "reportId": "22222"
  }
}

"""
SAMPLE RESPONSE = {
  "rval": {
    "ListReturnValue.Type": "ReportDefinitionReturnValue", 
    "Operation.Type": "REMOVE", 
    "values": {
      "operationSucceeded": "true", 
      "reportDefinition": {
        "accountId": "SAMPLE-ACCOUNT-ID", 
        "reportId": "22222", 
        "reportName": "Sample Report Definition", 
        "reportType": "ACCOUNT", 
        "dateRangeType": "CUSTOM_DATE", 
        "dateRange": {
          "startDate": "19700101", 
          "endDate": "20371231"
        }, 
        "fields": [
          "COST", 
          "IMPS", 
          "CLICKS", 
          "CLICK_RATE", 
          "AVG_CPC", 
          "AVG_DELIVER_RANK", 
          "TRACKING_URL", 
          "CONVERSIONS", 
          "CONV_RATE", 
          "CONV_VALUE", 
          "COST_PER_CONV", 
          "VALUE_PER_CONV", 
          "NETWORK", 
          "CLICK_TYPE", 
          "DEVICE", 
          "DAY", 
          "DAY_OF_WEEK", 
          "QUARTER", 
          "YEAR", 
          "MONTH", 
          "MONTH_OF_YEAR", 
          "WEEK", 
          "HOUR_OF_DAY"
        ], 
        "sortFields": {
          "type": "ASC", 
          "field": "CLICKS"
        }, 
        "filters": {
          "field": "COST", 
          "operator": "NOT_EQUALS", 
          "value": "100"
        }, 
        "isTemplate": "TRUE", 
        "intervalType": "SPECIFYDAY", 
        "specifyDay": "1", 
        "format": "CSV", 
        "encode": "UTF-8", 
        "language": "JA", 
        "compress": "NONE", 
        "includeZeroImpressions": "TRUE", 
        "includeDeleted": "TRUE"
      }
    }
  }
}
"""


def main():
    client = promotionalads.PromotionalAdsClient.LoadFromConfiguration()
    service = client.GetService(SERVICE)
    print("REQUEST : {}.{}\n{}".format(SERVICE, OPERATION, json.dumps(OPERAND, indent=2)))
    try:
        if OPERATION == "get":
            response = service.get(OPERAND)
        elif OPERATION.startswith("get"):
            get_method = getattr(service, OPERATION)
            response = get_method(OPERAND)
        elif OPERATION.startswith("mutate"):
            response = service.mutate(OPERAND)
        else:
            raise("Unknown Operation '{}'".format(OPERATION))
        print("RESPONSE :\n{}".format(response))
    except Exception as e:
        print("Exception at '{}' operations \n{}".format(SERVICE, e))
        raise e


if __name__ == '__main__':
    main()
