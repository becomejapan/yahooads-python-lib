# Copyright 2017 Become Corp. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Example code for
Service : AuditLogService
Operation: addJob
API Reference: https://github.com/yahoojp-marketing/sponsored-search-api-documents/blob/6.5/docs/en/api_reference/services/AuditLogService.md

Generated by 'api_reference_example_generator.py' using code template 'sample_template.py.template'
"""

import logging
import json

from yahooads import promotionalads

logging.basicConfig(level=logging.INFO)
# logging.getLogger('suds.client').setLevel(logging.DEBUG)
# logging.getLogger('suds.transport').setLevel(logging.DEBUG)


SERVICE = 'AuditLogService'
OPERATION = 'addJob'
OPERAND = {
  "operations": {
    "accountId": "SAMPLE-ACCOUNT-ID", 
    "operand": [
      {
        "jobName": "Sample AuditLog Job 1", 
        "eventSelector": [
          {
            "entityType": "AD", 
            "eventTypes": [
              "ADD", 
              "REMOVE"
            ]
          }, 
          {
            "entityType": "BIDDABLE_AD_GROUP_CRITERION", 
            "eventTypes": "ALL"
          }, 
          {
            "entityType": "NEGATVIE_AD_GROUP_CRITERION", 
            "eventTypes": "ALL"
          }
        ], 
        "dateRange": {
          "startDate": "20170701120000", 
          "endDate": "20170701235959"
        }, 
        "sourceType": "API", 
        "output": "TSV", 
        "encoding": "UTF_8", 
        "lang": "JA"
      }, 
      {
        "jobName": "Sample AuditLog Job 1", 
        "eventSelector": {
          "entityType": "ALL", 
          "eventTypes": "ALL"
        }, 
        "dateRange": {
          "startDate": "20170701120000", 
          "endDate": "20170701235959"
        }, 
        "sourceType": "YAHOO_JAPAN", 
        "output": "CSV", 
        "encoding": "UTF_8", 
        "lang": "EN"
      }
    ]
  }
}

"""
SAMPLE RESPONSE = {
  "rval": {
    "ListReturnValue.Type": "AuditLogReturnValue", 
    "Operation.Type": "AddJob", 
    "values": [
      {
        "operationSucceeded": "true", 
        "job": {
          "accountId": "SAMPLE-ACCOUNT-ID", 
          "jobId": "1000", 
          "jobName": "Sample AuditLog Job 1", 
          "jobStatus": "IN_PROGRESS", 
          "dateRange": {
            "startDate": "20170701120000", 
            "endDate": "20170701235959"
          }, 
          "sourceType": "USER", 
          "output": "TSV", 
          "encoding": "UTF_8", 
          "lang": "JA"
        }
      }, 
      {
        "operationSucceeded": "true", 
        "job": {
          "accountId": "SAMPLE-ACCOUNT-ID", 
          "jobId": "1001", 
          "jobName": "Sample AuditLog Job 2", 
          "jobStatus": "IN_PROGRESS", 
          "dateRange": {
            "startDate": "20170701120000", 
            "endDate": "20170701235959"
          }, 
          "sourceType": "YAHOO_JAPAN", 
          "output": "CSV", 
          "encoding": "UTF_8", 
          "lang": "EN"
        }
      }
    ]
  }
}
"""


def main():
    client = promotionalads.PromotionalAdsClient.LoadFromConfiguration()
    service = client.GetService(SERVICE)
    print("REQUEST : {}.{}\n{}".format(SERVICE, OPERATION, json.dumps(OPERAND, indent=2)))
    try:
        if OPERATION == "get":
            response = service.get(OPERAND)
        elif OPERATION.startswith("get"):
            get_method = getattr(service, OPERATION)
            response = get_method(OPERAND)
        elif OPERATION.startswith("mutate"):
            response = service.mutate(OPERAND)
        else:
            raise("Unknown Operation '{}'".format(OPERATION))
        print("RESPONSE :\n{}".format(response))
    except Exception as e:
        print("Exception at '{}' operations \n{}".format(SERVICE, e))
        raise e


if __name__ == '__main__':
    main()
