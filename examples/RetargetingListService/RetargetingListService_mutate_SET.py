# Copyright 2017 Become Corp. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Example code for
Service : RetargetingListService
Operation: mutate(SET)
API Reference: https://github.com/yahoojp-marketing/sponsored-search-api-documents/blob/6.5/docs/en/api_reference/services/RetargetingListService.md

Generated by 'api_reference_example_generator.py' using code template 'sample_template.py.template'
"""

import logging
import json

from yahooads import promotionalads

logging.basicConfig(level=logging.INFO)
# logging.getLogger('suds.client').setLevel(logging.DEBUG)
# logging.getLogger('suds.transport').setLevel(logging.DEBUG)


SERVICE = 'RetargetingListService'
OPERATION = 'mutate(SET)'
OPERAND = {
  "operator": "SET", 
  "accountId": "SAMPLE-ACCOUNT-ID", 
  "owner": "OWNER", 
  "operand": [
    {
      "xsi_type": "DefaultTargetList", 
      "accountId": "SAMPLE-ACCOUNT-ID", 
      "targetListId": "200000001", 
      "targetListType": "DEFAULT", 
      "targetListName": "Default_target_list", 
      "targetListDescription": "sample description", 
      "reachStorageStatus": "OPEN", 
      "reachStorageSpan": "1"
    }, 
    {
      "xsi_type": "RuleBaseTargetList", 
      "accountId": "SAMPLE-ACCOUNT-ID", 
      "targetListId": "200000002", 
      "targetListType": "RULE", 
      "targetListName": "Rule_based_target_list(update)", 
      "targetListDescription": "sample description", 
      "reachStorageStatus": "CLOSED", 
      "reachStorageSpan": "1", 
      "rules": {
        "ruleItems": {
          "xsi_type": "UrlRuleItem", 
          "ruleType": "URL_RULE", 
          "operator": "CONTAINS", 
          "value": "http://yahoo.com", 
          "urlKey": "REFFER_URL"
        }
      }, 
      "isAllVisitor": "TRUE", 
      "startDate": "20160701", 
      "endDate": "20161231"
    }, 
    {
      "xsi_type": "LogicalTargetList", 
      "accountId": "SAMPLE-ACCOUNT-ID", 
      "targetListId": "200000003", 
      "targetListType": "LOGICAL", 
      "targetListName": "Logical_taget_list(update)", 
      "targetListDescription": "sample description", 
      "reachStorageStatus": "CLOSED", 
      "reachStorageSpan": "1", 
      "logicalGroup": {
        "logicalOperand": {
          "targetListId": "100000005"
        }
      }
    }
  ]
}

"""
SAMPLE RESPONSE = {
  "rval": {
    "ListReturnValue.Type": "RetargetingListReturnValue", 
    "Operation.Type": "SET", 
    "values": [
      {
        "operationSucceeded": "true", 
        "targetList": {
          "xsi_type": "DefaultTargetList", 
          "accountId": "SAMPLE-ACCOUNT-ID", 
          "owner": "OWNER", 
          "retargetingAccountStatus": {
            "agreeDate": "20150626", 
            "reviewStatus": "APPROVED"
          }, 
          "targetListId": "200000001", 
          "targetListType": "DEFAULT", 
          "targetListName": "Default_list", 
          "targetListDescription": "sample description", 
          "reachStorageStatus": "OPEN", 
          "reachStorageSpan": "1", 
          "reach": "0", 
          "tag": ""
        }
      }, 
      {
        "operationSucceeded": "true", 
        "targetList": {
          "xsi_type": "RuleBaseTargetList", 
          "accountId": "SAMPLE-ACCOUNT-ID", 
          "owner": "OWNER", 
          "retargetingAccountStatus": {
            "agreeDate": "20150612", 
            "reviewStatus": "APPROVED"
          }, 
          "targetListId": "200000002", 
          "targetListTrackId": "1234567890", 
          "targetListType": "RULE", 
          "targetListName": "Rule_based_target_list(update)", 
          "targetListDescription": "sample description", 
          "reachStorageStatus": "CLOSED", 
          "reachStorageSpan": "1", 
          "reach": "0", 
          "rules": {
            "ruleItems": {
              "xsi_type": "UrlRuleItem", 
              "ruleType": "URL_RULE", 
              "operator": "CONTAINS", 
              "value": "http://yahoo.com", 
              "urlKey": "REFFER_URL"
            }
          }, 
          "isAllVisitor": "TRUE", 
          "isDateSpecific": "TRUE", 
          "startDate": "20160701", 
          "endDate": "20161231"
        }
      }, 
      {
        "operationSucceeded": "true", 
        "targetList": {
          "xsi_type": "LogicalTargetList", 
          "accountId": "SAMPLE-ACCOUNT-ID", 
          "owner": "OWNER", 
          "retargetingAccountStatus": {
            "agreeDate": "20150612", 
            "reviewStatus": "APPROVED"
          }, 
          "targetListId": "200000003", 
          "targetListTrackId": "1234567890", 
          "targetListType": "LOGICAL", 
          "targetListName": "Logical_target_list(update)", 
          "targetListDescription": "sample description", 
          "reachStorageStatus": "CLOSED", 
          "reachStorageSpan": "1", 
          "reach": "3000", 
          "logicalGroup": {
            "condition": "OR", 
            "logicalOperand": {
              "targetListId": "100000005"
            }
          }
        }
      }
    ]
  }
}
"""


def main():
    client = promotionalads.PromotionalAdsClient.LoadFromConfiguration()
    service = client.GetService(SERVICE)
    print("REQUEST : {}.{}\n{}".format(SERVICE, OPERATION, json.dumps(OPERAND, indent=2)))
    try:
        if OPERATION == "get":
            response = service.get(OPERAND)
        elif OPERATION.startswith("get"):
            get_method = getattr(service, OPERATION)
            response = get_method(OPERAND)
        elif OPERATION.startswith("mutate"):
            response = service.mutate(OPERAND)
        else:
            raise("Unknown Operation '{}'".format(OPERATION))
        print("RESPONSE :\n{}".format(response))
    except Exception as e:
        print("Exception at '{}' operations \n{}".format(SERVICE, e))
        raise e


if __name__ == '__main__':
    main()
